// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  student
  lecturer
  admin
}

model file {
  uuid          String       @id @unique @default(uuid())
  src           String
  provider      String // self-hosted || cloudinary || s3
  type          String // image || video // documents etc
  size          String?
  alt           String?
  isDeleted     Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          user[]
  voteOptions   voteOptions? @relation(fields: [voteOptionsId], references: [uuid])
  voteOptionsId String?
  votes         votes[]
}

model department {
  uuid      String   @id @unique @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      user[]
}

model user {
  uuid        String      @id @unique @default(uuid())
  matricNo    String?
  firstName   String
  middleName  String?
  email       String?     @unique
  phone       String?
  lastName    String
  password    String
  role        Role        @default(student)
  isVerified  Boolean     @default(false)
  isSuspended Boolean     @default(false)
  isBanned    Boolean     @default(false)
  avatar      file?       @relation(fields: [fileId], references: [uuid])
  department  department? @relation(fields: [departmentId], references: [uuid])

  fileId       String?
  departmentId String?
  votes        votes[]       @relation("created_by_user")
  voteOptions  voteOptions[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model voteOptions {
  uuid    String @id @unique @default(uuid())
  votes   votes  @relation(fields: [votesId], references: [uuid])
  file    file[]
  votesId String

  text   String?
  users  user?   @relation(fields: [userId], references: [uuid])
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Visibility {
  public
  private
}

enum WhoCanView {
  everyone
}

model votes {
  uuid        String     @id @unique @default(uuid())
  title       String
  description String?    @db.Text
  visibility  Visibility @default(public)
  whoCanView  WhoCanView @default(everyone)

  thumbnail file?   @relation(fields: [fileId], references: [uuid])
  fileId    String?

  createdBy user   @relation("created_by_user", fields: [userId], references: [uuid])
  userId    String

  options   voteOptions[]
  startDate DateTime
  endDate   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
